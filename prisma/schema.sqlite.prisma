generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("SQLITE_DATABASE_URL")
}

enum TicketType {
  feature
  bug
}

enum TicketStatus {
  backlog
  in_progress
  in_review
  blocked
  done
}

model User {
  id           String   @id @default(cuid())
  email        String?  @unique
  name         String?
  image        String?
  role         String   @default("member")
  githubToken  String?
  jiraToken    String?
  tickets      Ticket[] @relation("TicketCreatedBy")
  assignments  Ticket[] @relation("TicketAssignedTo")
  comments     Comment[]
  attachments  Attachment[]
  history      TicketHistory[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Ticket {
  id            String         @id @default(cuid())
  type          TicketType
  title         String
  description   String
  status        TicketStatus   @default(backlog)
  priority      String         @default("medium")
  severity      String         @default("minor")
  fields        Json
  reporterName  String?
  reporterEmail String?
  createdBy     User?          @relation("TicketCreatedBy", fields: [createdById], references: [id])
  createdById   String?
  assignedTo   User?          @relation("TicketAssignedTo", fields: [assignedToId], references: [id])
  assignedToId String?
  comments     Comment[]
  attachments  Attachment[]
  history      TicketHistory[]
  githubLinks  GitHubLink[]
  jiraLinks    JiraLink[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model TicketHistory {
  id           String   @id @default(cuid())
  ticket       Ticket   @relation(fields: [ticketId], references: [id])
  ticketId     String
  fieldChanged String
  oldValue     String?
  newValue     String?
  changedBy    User?    @relation(fields: [changedById], references: [id])
  changedById  String?
  createdAt    DateTime @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Attachment {
  id           String   @id @default(cuid())
  filename     String
  url          String
  ticket       Ticket   @relation(fields: [ticketId], references: [id])
  ticketId     String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById String
  createdAt    DateTime @default(now())
}

model FieldConfig {
  id         String     @id @default(cuid())
  ticketType TicketType
  fieldName  String
  isRequired Boolean    @default(false)
  isVisible  Boolean    @default(true)

  @@unique([ticketType, fieldName])
}

model GitHubLink {
  id         String  @id @default(cuid())
  ticket     Ticket  @relation(fields: [ticketId], references: [id])
  ticketId   String
  repo       String
  pullNumber Int
  branch     String

  @@unique([ticketId, repo, pullNumber])
}

model JiraLink {
  id       String @id @default(cuid())
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String
  jiraKey  String
  jiraUrl  String

  @@unique([ticketId, jiraKey])
}
